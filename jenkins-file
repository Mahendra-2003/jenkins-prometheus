pipeline {
    agent any

    environment {
        RULES_REPO = 'https://github.com/Mahendra-2003/jenkins-prometheus.git'
        RULES_FILE = 'oom.yaml'
    }

    stages {
        stage('Clone Prometheus Rules Repo') {
            steps {
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'TOKEN')]) {
                    sh '''
                        rm -rf rules-repo
                        git clone https://$TOKEN@github.com/Mahendra-2003/jenkins-prometheus.git rules-repo
                    '''
                }
            }
        }

        stage('Generate Prometheus Rule') {
            steps {
                script {
                    def prometheusRule = """
kind: prometheusRule
metadata:
  name: OOM
  project: self-healing-engine
spec:
  groups:
    - name: self-healing-engine.OOM
      rules:
        - alert: OOM for DM
          expr: '{__name__=~"kube_pod_container_status_last_terminated_reason", reason="OOMKilled", namespace="dm-dev-int-gob"} > 0'
          for: 5m
          labels:
            servicenow_ci_type: cmdb_ci_kubernetes_pod
            servicenow_event_type: MEMORY_USAGE
            servicenow_severity: "1"
          annotations:
            description: Triggers when any pod in dm-dev-int-gob goes into OOM
            title: dm-dev-int-gob
                    """
                    writeFile file: "rules-repo/${RULES_FILE}", text: prometheusRule
                }
            }
        }

        stage('Commit and Push Rule') {
            steps {
                dir('rules-repo') {
                    sh '''
                        git config user.name "jenkins-bot"
                        git config user.email "jenkins-bot@example.com"
                        git add ${RULES_FILE}
                        git commit -m "Add OOM alert rule for self-healing" || echo "No changes to commit"
                        git push origin main
                    '''
                }
            }
        }

        stage('Deploy Rule to Argos') {
            steps {
                withCredentials([string(credentialsId: 'ARGOS_API_TOKEN', variable: 'ARGOS_TOKEN')]) {
                    sh '''
                        set -e
                        response=$(curl -s -w "%{http_code}" -o result.txt -X POST https://argos.example.com/api/v1/rules \
                            -H "Authorization: Bearer $ARGOS_TOKEN" \
                            -H "Content-Type: application/yaml" \
                            --data-binary @rules-repo/oom.yaml)

                        if [ "$response" -ne 200 ]; then
                            echo "Argos rule deployment failed:"
                            cat result.txt
                            exit 1
                        else
                            echo "Rule deployed successfully to Argos."
                        fi
                    '''
                }
            }
        }
    }
}
